#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <io.h> // for getFiles
#include <opencv2/opencv.hpp>
#include "ImageProcess.h"
using namespace std;


void getFiles( string path, vector<string>& files )
{
	//文件句柄
	long   hFile   =   0;
	//文件信息
	struct _finddata_t fileinfo;
	string p;
	if((hFile = _findfirst(p.assign(path).append("\\*").c_str(),&fileinfo)) !=  -1)
	{
		do
		{
			//如果是目录,迭代之
			//如果不是,加入列表
			if((fileinfo.attrib &  _A_SUBDIR))
			{
				if(strcmp(fileinfo.name,".") != 0  &&  strcmp(fileinfo.name,"..") != 0)
					getFiles( p.assign(path).append("\\").append(fileinfo.name), files );
			}
			else
			{
				files.push_back(p.assign(path).append("\\").append(fileinfo.name) );
			}
		}while(_findnext(hFile, &fileinfo)  == 0);
		_findclose(hFile);
	}
}

string splitFileName(const string& file) {
	size_t found = file.find_last_of("/\\");
	return file.substr(found + 1);
}

int main()
{
	string newFilePath = "..\\..\\circle";

	string rm = "rd" + newFilePath;
	system(rm.c_str());
	string mkdir = "md " + newFilePath;
	system(mkdir.c_str());

	string filePath = "D:\\Users\\Desktop\\1\\circle";
	vector<string> files;
	getFiles(filePath, files);
	cout << "Input Read End." << endl;
	
	size_t n = files.size();
	cout << n << endl;
	for (size_t i = 0; i < n;++i) {
		string inPath = files[i];
		string fileName = splitFileName(files[i]);
		string outPath = newFilePath + "\\" + fileName;

		IplImage *img = cvLoadImage((inPath.c_str()), CV_LOAD_IMAGE_COLOR);
		IplImage *GrayImage = cvCreateImage(cvGetSize(img),IPL_DEPTH_8U,1);
		cvCvtColor(img,GrayImage,CV_RGB2GRAY);

		//int ostuThreshold = GetOtsuThreshold(GrayImage);
		// 去边界的阈值
		int ostuThreshold = 245;
		SegPosition seg_position;
		GetsegPosition(GrayImage, ostuThreshold, seg_position);
		IplImage *validPart = extractValidPart(img, seg_position);

		//归一化图片大小
		IplImage* stdImg= cvCreateImage( cvSize(240,260), IPL_DEPTH_8U, 3);
		cvResize(validPart, stdImg, CV_INTER_LINEAR);
		cvSaveImage(outPath.c_str(), stdImg);

		cout << outPath << endl;


		cvReleaseImage(&validPart);
		cvReleaseImage(&GrayImage);
		cvNamedWindow("test1",CV_WINDOW_AUTOSIZE);
		cvShowImage("test1",img);
		cvWaitKey(0);
		cvReleaseImage(&img);
		cvDestroyWindow("test1");
	}
	system("pause");
	return 0;
}